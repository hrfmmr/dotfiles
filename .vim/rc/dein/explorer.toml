[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap [nerdtree] <Nop>
  nmap <Leader>e [nerdtree]
  nnoremap <silent> [nerdtree]c :NERDTreeFind<CR>
  nnoremap <silent> [nerdtree]n :NERDTreeToggle<CR>
  nnoremap <silent> [nerdtree]r :NERDTree .<CR>

  let g:NERDTreeShowHidden=1
  let g:NERDTreeChDirMode=2
  let g:NERDTreeIgnore = ['\.pyc$', '__pycache__']
  if !isdirectory(expand('~/.config/nvim/nerdtree_plugin'))
    call system('ln -snfv ' . 
    \ expand('~/dotfiles/.vim/nerdtree_plugin') .
    \ ' ' .
    \ expand('~/.config/nvim/nerdtree_plugin')
    \)
  endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
hook_add = '''
  let g:neoyank#limit = 1000
  "fix for yankring and neovim
  let g:yankring_clipboard_monitor=0
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'

[[plugins]]
repo = 'delphinus/vim-denite-memo'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
on_func  = ['denite#']
hook_add = ''' "{{{
  nnoremap <silent> <C-u>o      :<C-u>Denite file_mru<CR>
  nnoremap <silent> <C-u>f      :<C-u>Denite file/rec<CR>
  nnoremap <silent> <C-u>c      :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <silent> <C-u>b      :<C-u>Denite buffer<CR>
  nnoremap <silent> <C-u>d      :<C-u>Denite directory_rec<CR>
  nnoremap <silent> <C-u>t      :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-u>g      :<C-u>Denite grep<CR>
  nnoremap <silent> <C-u>G      :<C-u>DeniteBufferDir grep<CR>
  nnoremap <silent> <C-u>/      :<C-u>Denite line<CR>
  nnoremap <silent> <C-u>y      :<C-u>Denite neoyank<CR>
  nnoremap <silent> <C-u>r      :<C-u>Denite -resume -no-start-filter<CR>
  nnoremap <silent> <C-u>e      :<C-u>Denite emoji<CR>
  nnoremap <silent> <C-u>mn     :<C-u>Denite memo memo:new<CR>
  nnoremap <silent> <C-u>m/     :<C-u>Denite memo/grep::!<CR>
  nnoremap <silent> <C-u>s      :<C-u>Denite unite:gist<CR>
"}}} '''
hook_post_source = ''' "{{{
  " default options
  call denite#custom#option('_', {
    \ 'cached_filter': v:true,
    \ 'cursor_shape': v:true,
    \ 'cursor_wrap': v:true,
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'highlight_matched_char': 'Underlined',
    \ 'prompt': '$ ',
    \ 'split': 'floating',
    \ 'start_filter': v:true,
    \ })

  function! s:denite_detect_size() abort
    let s:denite_win_width_percent = 0.85
    let s:denite_win_height_percent = 0.7
    let s:denite_winwidth = float2nr(&columns * s:denite_win_width_percent)
    let s:denite_wincol = float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2)
    let s:denite_winheight = float2nr(&lines * s:denite_win_height_percent)
    let s:denite_winrow = float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2)
    call denite#custom#option('_', {
      \ 'wincol': s:denite_wincol,
      \ 'winheight': s:denite_winheight,
      \ 'winrow': s:denite_winrow,
      \ 'winwidth': s:denite_winwidth,
      \ })
  endfunction
  augroup denite-detect-size
    autocmd!
    autocmd VimResized * call <SID>denite_detect_size()
  augroup END
  call s:denite_detect_size()

  " file/rec settings
  call denite#custom#var('file/rec', 'command',
    \ ['fd', '--type', 'f', '--follow', '--hidden', '--exclude', '.git', '.*'])

  " grep settings
  call denite#custom#var('grep', 'command', 
    \ ['rg', '--hidden', '--follow', '--smart-case', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep', '--no-heading'])

  " denite buffer mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    if exists('&winblend')
      setlocal winblend=30
    endif
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> t       denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> \|      denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> s       denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> -       denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'quick_move')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  endfunction
"}}}'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  set rtp+=~/.fzf

  function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --ignore-file ~/.ignore --hidden --column --line-number --no-heading --color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction

  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

  nnoremap <silent> <C-u><C-u> :Files<CR>
  nnoremap <silent> <C-u><C-b> :Buffers<CR>
  nnoremap <silent> <C-u><C-g> :RG <C-R><C-W><CR>
  nnoremap <silent> <C-u><C-h> :History<CR>
  nnoremap <silent> <C-u><C-l> :Lines<CR>
  nnoremap <silent> <C-u><C-r> :BLines<CR>
  nnoremap <silent> <C-u><C-s> :GFiles?<CR>
  nnoremap <silent> <C-u><C-t> :Filetypes<CR>
  nnoremap <silent> <C-u><C-n> :Snippets<CR>
'''
