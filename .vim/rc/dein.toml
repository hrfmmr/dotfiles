[[plugins]]
repo = 'Shougo/dein.vim'


# Code Completion

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
  set hidden
  let g:LanguageClient_autoStart = 1
  let g:LanguageClient_serverCommands = {
    \ 'python': ['pyls'],
    \ 'go': ['gopls'],
\ }
  nnoremap <silent> <C-g><C-d> :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> <C-g><C-r> :Denite references<CR>
  nnoremap <silent> <C-g><C-h> :call LanguageClient#textDocument_hover()<CR>
  " Run gofmt and goimports on save
  autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_post_source = '''
  call echodoc#enable()
'''

# go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  augroup GolangGroup
    autocmd!

    let g:go_fmt_command = "goimports"
    let g:go_auto_type_info = 1
    let g:go_auto_sameids = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1

    function! s:build_go_files()
      let l:file = expand('%')
      if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
      elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
      endif
    endfunction

    autocmd FileType go nmap <Leader>i <Plug>(go-info)
    autocmd FileType go nnoremap <Leader>b :<C-u>call <SID>build_go_files()<CR>
    autocmd FileType go nmap <Leader>x <Plug>(go-run)
    autocmd FileType go nmap <Leader>T <Plug>(go-test)
    autocmd FileType go nmap <Leader>C <Plug>(go-coverage-toggle)
  augroup END
'''


# Code formatting

[[plugins]]
repo = 'python/black'
on_ft = 'python'
hook_add = '''
  autocmd BufWritePre *.py execute ':Black'
'''


# Run Script


[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_add = '''
  if executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif

  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nmap <silent> <Leader>ru :QuickRun<CR>
  let g:quickrun_config = {}
  let g:quickrun_config._ = {
  \   'runner' : 'vimproc',
  \   'runner/vimproc/updatetime' : 40,
  \}
  let g:quickrun_config.swift = {
  \ 'command': 'xcrun',
  \ 'cmdopt': 'swift',
  \ 'exec': '%c %o %s',
  \}
'''


# File Explorer


[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap [nerdtree] <Nop>
  nmap <Leader>e [nerdtree]
  nnoremap <silent> [nerdtree]c :NERDTree %:h<CR>
  nnoremap <silent> [nerdtree]n :NERDTreeToggle<CR>
  nnoremap <silent> [nerdtree]r :NERDTree .<CR>

  let g:NERDTreeShowHidden=1
  let g:NERDTreeChDirMode=2
  let g:NERDTreeIgnore = ['\.pyc$', '__pycache__']
  if !isdirectory(expand('~/.config/nvim/nerdtree_plugin'))
    call system('ln -snfv ' . 
    \ expand('~/dotfiles/.vim/nerdtree_plugin') .
    \ ' ' .
    \ expand('~/.config/nvim/nerdtree_plugin')
    \)
  endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
hook_add = '''
  let g:neoyank#limit = 1000
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'
hook_add = '''
  nmap <silent> <C-u>e :<C-u>Denite emoji<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
on_func  = ['denite#']
hook_add = ''' "{{{
  nnoremap <silent> <C-u>f     :<C-u>Denite file/rec<CR>
  nnoremap <silent> <C-u>c     :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <silent> <C-u>b     :<C-u>Denite buffer<CR>
  nnoremap <silent> <C-u>d     :<C-u>Denite directory_rec<CR>
  nnoremap <silent> <C-u>t     :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-u>g     :<C-u>Denite grep<CR>
  nnoremap <silent> <C-u>G     :<C-u>DeniteBufferDir grep<CR>
  nnoremap <silent> <C-u><C-g> :<C-u>DeniteCursorWord grep<CR>
  nnoremap <silent> <C-u>/     :<C-u>Denite line<CR>
  nnoremap <silent> <C-u><C-/> :<C-u>DeniteCursorWord line<CR>
  nnoremap <silent> <C-u>y     :<C-u>Denite neoyank<CR>
  nnoremap <silent> <C-u>r     :<C-u>Denite -resume -no-start-filter<CR>
"}}} '''
hook_post_source = ''' "{{{
  " default options
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7

  call denite#custom#option('_', {
    \ 'cached_filter': v:true,
    \ 'cursor_shape': v:true,
    \ 'cursor_wrap': v:true,
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'highlight_matched_char': 'Underlined',
    \ 'prompt': '$ ',
    \ 'split': 'floating',
    \ 'start_filter': v:true,
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })

  " file/rec settings
  call denite#custom#var('file/rec', 'command',
    \ ['fd', '--type', 'f', '--follow', '--hidden', '--exclude', '.git', '.*'])

  " grep settings
  call denite#custom#var('grep', 'command', 
    \ ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep', '--no-heading'])

  " denite buffer mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> t       denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> \|      denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> -       denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'quick_move')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  endfunction
"}}}'''


# Edit Utils


[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 1
  nmap <Space>/ <Plug>NERDCommenterToggle
  vmap <Space>/ <Plug>NERDCommenterToggle
  vmap <Space>s <Plug>NERDCommenterSexy
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'


# Window Utils


[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'wesQ3/vim-windowswap'
hook_add = '''
  let g:windowswap_map_keys = 0 
  nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>
'''


# git Utils


[[plugins]]
repo = 'tpope/vim-fugitive.git'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap     <Leader>g   [fugitive]
  nnoremap <silent> [fugitive]b :Gblame<CR>
  nnoremap <silent> [fugitive]s :Gstatus<CR>
  nnoremap <silent> [fugitive]w :Gwrite<CR>
  nnoremap <silent> [fugitive]c :Gcommit<CR>
  nnoremap <silent> [fugitive]d :Gdiffsplit<CR>
  nnoremap <silent> [fugitive]r :Git! diff --staged<CR>
  nnoremap <silent> [fugitive]R :Git! diff <CR>
'''


[[plugins]]
repo = 'tpope/vim-dispatch'


[[plugins]]
repo = 'airblade/vim-gitgutter'


[[plugins]]
repo = 'gregsexton/gitv.git'
hook_add = '''
  nnoremap <silent> <Leader>gv :Gitv --all<CR>
  nnoremap <silent> <Leader>gV :Gitv!<CR>
  nnoremap <Leader>gG :Gitv -G 
  augroup GitvGroup
    autocmd!
    autocmd FileType git :setlocal foldlevel=99
  augroup END
'''


# Syntax highlight


# html enclosing tags
[[plugins]]
repo = 'valloric/MatchTagAlways'
on_ft = 'html'

# js(x)
[[plugins]]
repo = 'pangloss/vim-javascript'
hook_add = '''
  let g:javascript_plugin_flow = 1
'''

[[plugins]]
repo = 'mxw/vim-jsx'
hook_add = '''
  augroup ES6ScriptGroup
    autocmd!
    au BufRead,BufNewFile *.es6 set filetype=javascript.jsx
  augroup END
'''

# nginx
[[plugins]]
repo = "chr4/nginx.vim"

# toml
[[plugins]]
repo = 'cespare/vim-toml'

# swift
[[plugins]]
repo = 'keith/swift.vim'

[[plugins]]
repo = 'kballard/vim-swift'

# jinja2
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

# iptables
[[plugins]]
repo = 'vim-scripts/iptables'

# Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

# Kotlin
[[plugins]]
repo = 'udalov/kotlin-vim'

# PlantUML

[[plugins]]
repo = 'aklt/plantuml-syntax'
hook_add = '''
  augroup PlantUMLGroup
    autocmd!
    au FileType plantuml command! OpenUml :!open -a "Google Chrome" %
  augroup END
'''

# tmux
[[plugins]]
repo = 'tmux-plugins/vim-tmux'

# Editor Utils

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_keys = ';a,oqepughtcrnwv'
    let g:EasyMotion_smartcase = 1
    nmap s <Plug>(easymotion-s2)
    xmap s <Plug>(easymotion-s2)
    nmap <Leader>s <Plug>(easymotion-sn)
    xmap <Leader>s <Plug>(easymotion-sn)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_space_jump_first = 1
    let g:EasyMotion_startofline = 0
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

# markdown

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
depends = ['tabular']
on_event = 'VimEnter'
hook_add = '''
  let g:vim_markdown_conceal = 0
  let g:tex_conceal = ""
  let g:vim_markdown_math = 1
'''
hook_post_source = '''
  set conceallevel=0
'''

# python class outline
[[plugins]]
repo = "majutsushi/tagbar"
hook_add = '''
  nmap <Leader>c :TagbarToggle<CR>

  let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
  \ }
'''

# indent line
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_enabled = 1
  let g:indentLine_color_term = 239
'''


# Colorscheme


[[plugins]]
repo = 'chriskempson/base16-vim'
on_event = 'VimEnter'
hook_post_source = '''
  fun! s:set_highlight()
    hi Search          ctermfg=6     ctermbg=10  guifg=#8abeb7 guibg=#373b41
    hi DiffAdd         ctermfg=66    ctermbg=237 guifg=#709080 guibg=#313c36 gui=bold
    hi DiffChange      ctermbg=236                             guibg=#333333
    hi DiffDelete      ctermfg=236   ctermbg=238 guifg=#333333 guibg=#464646
    hi DiffText        ctermfg=217   ctermbg=237 guifg=#ecbcbc guibg=#41363c gui=bold
  endfun

  fun! s:set_termguicolors()
    let g:terminal_color_0 = "\#232c33"
    let g:terminal_color_1 = "\#99736e"
    let g:terminal_color_2 = "\#78a090"
    let g:terminal_color_3 = "\#bfb7a1"
    let g:terminal_color_4 = "\#7c9fa6"
    let g:terminal_color_5 = "\#BF9C86"
    let g:terminal_color_6 = "\#99BFBA"
    let g:terminal_color_7 = "\#f0f0f0"
    let g:terminal_color_8 = "\#70838c"
    let g:terminal_color_9 = "\#99736e"
    let g:terminal_color_10 = "\#78a090"
    let g:terminal_color_11 = "\#bfb7a1"
    let g:terminal_color_12 = "\#7c9fa6"
    let g:terminal_color_13 = "\#BF9C86"
    let g:terminal_color_14 = "\#99BFBA"
    let g:terminal_color_15 = "\#f0f0f0"
  endfun

  colorscheme base16-tomorrow-night
  call s:set_highlight()
  if has('nvim')
    call s:set_termguicolors()
  endif
'''
