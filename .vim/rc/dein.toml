[[plugins]]
repo = 'Shougo/dein.vim'


# Code Completion


[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

# python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

# swift
[[plugins]]
repo = 'landaire/deoplete-swift'
on_ft = 'swift'
hook_add = '''
  if executable('brew') && !executable('sourcekitten')
    execute '!brew install sourcekitten'
  endif

  let g:deoplete#sources#swift#daemon_autostart = 1
'''


# Snippet


[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']


[[plugins]]
repo = 'pe-ter-/neosnippet-snippets'


# Run Script


[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_add = '''
  if executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif

  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nmap <silent> <Leader>ru :QuickRun<CR>
  let g:quickrun_config = {}
  let g:quickrun_config._ = {
  \   'runner' : 'vimproc',
  \   'runner/vimproc/updatetime' : 40,
  \}
  let g:quickrun_config.swift = {
  \ 'command': 'xcrun',
  \ 'cmdopt': 'swift',
  \ 'exec': '%c %o %s',
  \}
'''


# File Explorer


[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap [nerdtree] <Nop>
  nmap <Leader>e [nerdtree]
  nnoremap <silent> [nerdtree]c :NERDTree %:h<CR>
  nnoremap <silent> [nerdtree]n :NERDTreeToggle<CR>
  nnoremap <silent> [nerdtree]r :NERDTree .<CR>

  let g:NERDTreeShowHidden=1
  let g:NERDTreeChDirMode=2
  let g:NERDTreeIgnore = ['\.pyc$', '__pycache__']
  if !isdirectory(expand('~/.config/nvim/nerdtree_plugin'))
    call system('ln -snfv ' . 
    \ expand('~/dotfiles/.vim/nerdtree_plugin') .
    \ ' ' .
    \ expand('~/.config/nvim/nerdtree_plugin')
    \)
  endif
'''

[[plugins]]
repo = 'pe-ter-/fzf.vim'
rev = 'ag-default-options'
if = 'executable("fzf")'
on_cmd = ['FZF','fzf#run']
hook_add = '''
  set rtp+=~/.fzf
  if !isdirectory(expand('~/.cache/fzf'))
    call mkdir(expand('~/.cache/fzf'), 'p')
  endif
  nnoremap [fzf] <Nop>
  nmap <Leader>z [fzf]
  nnoremap <silent> [fzf]w :Windows<CR>
  nnoremap <silent> [fzf]o :Files<CR>
  nnoremap <silent> [fzf]b :Buffers<CR>
  nnoremap <silent> [fzf]l :Lines<CR>
  nnoremap <silent> [fzf]c :BLines<CR>
  nnoremap <silent> [fzf]m :Marks<CR>
  nnoremap <silent> [fzf]h :History<CR>
  nnoremap <silent> [fzf]e :History:<CR>
  nnoremap <silent> [fzf]/ :History/<CR>
  nnoremap <silent> [fzf]f :Filetypes<CR>
  nnoremap <silent> [fzf]t :Tags<CR>
  nnoremap [fzf]a :Ag<Space>
  nnoremap [fzf]A :Ag!<Space>
  nnoremap <silent> [fzf]g :Ag<Space><C-R><C-W><CR>
  let g:fzf_buffers_jump = 1
  let g:fzf_history_dir = '~/.cache/fzf'
  augroup FzfTagsGroup
    autocmd!
    au BufNewFile,BufRead *.py let g:fzf_tags_command = "ctags -R --languages=python --python-kinds=-iv --exclude=.tox --exclude=.toxenv -f `pwd`/tags `pwd`"
    au VimEnter * command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)
  augroup END
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
hook_add = '''
  let g:neoyank#limit = 1000
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'
hook_add = '''
  nmap <silent> <C-u><C-e> :<C-u>Denite emoji<CR>
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
  nnoremap <silent> <C-g><C-d> :DeniteCursorWord gtags_def<CR>
  nnoremap <silent> <C-g><C-r> :DeniteCursorWord gtags_ref<CR>
  nnoremap <silent> <C-g><C-g> :DeniteCursorWord gtags_grep:
  nnoremap          <C-g>g     :Denite gtags_grep:
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
  nmap <silent> <C-u><C-b> :<C-u>Denite buffer<CR>
  nmap <silent> <C-u><C-f> :<C-u>Denite filetype<CR>
  nmap <silent> <C-u><C-o> :<C-u>Denite file_rec<CR>
  nmap <silent> <C-u><C-l> :<C-u>DeniteCursorWord line<CR>
  nmap <silent> <C-u>l     :<C-u>Denite line<CR>
  nmap <silent> <C-u><C-g> :<C-u>DeniteCursorWord grep<CR>
  nmap <silent> <C-u>g     :<C-u>Denite grep<CR>
  nmap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
  nmap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
  nmap <silent> <C-u><C-r> :<C-u>Denite -resume<CR>
  nmap <silent> <C-u>=     :<C-u>Denite -resume -immediately -select=+1<CR>
  nmap <silent> <C-u><C-_> :<C-u>Denite -resume -immediately -select=-1<CR>
'''
hook_post_source = '''
  call denite#custom#var('file_rec', 'command',
  \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  call denite#custom#var('grep', 'command',
  \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
  call denite#custom#var('grep', 'default_opts', [])
  call denite#custom#var('grep', 'recursive_opts', [])
'''


# Edit Utils


[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 1
  nmap <Space>/ <Plug>NERDCommenterToggle
  vmap <Space>/ <Plug>NERDCommenterToggle
  vmap <Space>s <Plug>NERDCommenterSexy
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'


# Window Utils


[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'wesQ3/vim-windowswap'
hook_add = '''
  let g:windowswap_map_keys = 0 
  nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>
'''


# git Utils


[[plugins]]
repo = 'tpope/vim-fugitive.git'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap     <Leader>g   [fugitive]
  nnoremap <silent> [fugitive]b :Gblame<CR>
  nnoremap <silent> [fugitive]s :Gstatus<CR>
  nnoremap <silent> [fugitive]w :Gwrite<CR>
  nnoremap <silent> [fugitive]c :Gcommit<CR>
  nnoremap <silent> [fugitive]d :Gdiff<CR>
  nnoremap <silent> [fugitive]r :Git diff --staged<CR>
  nnoremap <silent> [fugitive]R :Git diff <CR>
'''


[[plugins]]
repo = 'tpope/vim-dispatch'


[[plugins]]
repo = 'airblade/vim-gitgutter'


[[plugins]]
repo = 'gregsexton/gitv.git'
hook_add = '''
  nnoremap <silent> <Leader>gv :Gitv --all<CR>
  nnoremap <silent> <Leader>gV :Gitv!<CR>
  nnoremap <Leader>gG :Gitv -G 
  augroup GitvGroup
    autocmd!
    autocmd FileType git :setlocal foldlevel=99
  augroup END
'''


# Ctags


[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
  augroup CtagsGroup
    autocmd!
    au BufNewFile,BufRead *.py,*.rb let g:auto_ctags = 0
    au BufNewFile,BufRead *.py let g:auto_ctags_tags_args = "--languages=python -f `pwd`/tags `pwd`"
    au BufNewFile,BufRead *.rb let g:auto_ctags_tags_args = "--languages=ruby -f ~/rb.tags `pwd`"
  augroup END
'''


# Linter


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_statusline_format = ['E%d', 'W%d', '']
  let g:ale_echo_msg_format = '%linter%: %s'
  nmap <silent> [a <Plug>(ale_previous_wrap)
  nmap <silent> ]a <Plug>(ale_next_wrap)
'''


# Syntax highlight


# html enclosing tags
[[plugins]]
repo = 'valloric/MatchTagAlways'
on_ft = 'html'

# js(x)
[[plugins]]
repo = 'pangloss/vim-javascript'
hook_add = '''
  let g:javascript_plugin_flow = 1
'''

[[plugins]]
repo = 'mxw/vim-jsx'
hook_add = '''
  augroup ES6ScriptGroup
    autocmd!
    au BufRead,BufNewFile *.es6 set filetype=javascript.jsx
  augroup END
'''

# less
[[plugins]]
repo = 'groenewege/vim-less'

# nginx
[[plugins]]
repo = "evanmiller/nginx-vim-syntax"

# toml
[[plugins]]
repo = 'cespare/vim-toml'

# swift
[[plugins]]
repo = 'keith/swift.vim'

[[plugins]]
repo = 'kballard/vim-swift'

# jinja2
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

# iptables
[[plugins]]
repo = 'vim-scripts/iptables'


# Editor Utils

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_keys = ';a,oqepughtcrnwv'
    let g:EasyMotion_smartcase = 1
    nmap s <Plug>(easymotion-s2)
    xmap s <Plug>(easymotion-s2)
    nmap <Leader>s <Plug>(easymotion-sn)
    xmap <Leader>s <Plug>(easymotion-sn)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_space_jump_first = 1
    let g:EasyMotion_startofline = 0
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

# python class outline
[[plugins]]
repo = "majutsushi/tagbar"
hook_add = '''
  nmap <Leader>c :TagbarToggle<CR>
'''

# indent line
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_enabled = 1
  let g:indentLine_color_term = 239
'''


# Colorscheme


[[plugins]]
repo = 'chriskempson/base16-vim'
on_event = 'VimEnter'
hook_post_source = '''

  colorscheme base16-tomorrow-night

  fun! s:highlight()
    hi Search                                    guifg=#f8f8f8 guibg=#4f94cd
    hi DiffAdd         ctermfg=66    ctermbg=237 guifg=#709080 guibg=#313c36 gui=bold
    hi DiffChange      ctermbg=236                             guibg=#333333
    hi DiffDelete      ctermfg=236   ctermbg=238 guifg=#333333 guibg=#464646
    hi DiffText        ctermfg=217   ctermbg=237 guifg=#ecbcbc guibg=#41363c gui=bold
  endfun

  augroup colorscheme
    autocmd!
    autocmd ColorScheme * call s:highlight()
  augroup END

  call s:highlight()
'''
