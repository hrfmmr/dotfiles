[[plugins]]
repo = 'Shougo/dein.vim'


# Code Completion


[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_add = '''
  let g:python3_host_prog = expand('$HOME') . '/.pyenv/shims/python3'
  let g:deoplete#enable_at_startup = 1
'''

# python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

# swift
[[plugins]]
repo = 'landaire/deoplete-swift'
on_ft = 'swift'
hook_add = '''
  if executable('brew') && !executable('sourcekitten')
    execute '!brew install sourcekitten'
  endif

  let g:deoplete#sources#swift#daemon_autostart = 1
'''


# Run Script


[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_add = '''
  if executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif

  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nmap <silent> <Leader>ru :QuickRun<CR>
  let g:quickrun_config = {}
  let g:quickrun_config._ = {
  \   'runner' : 'vimproc',
  \   'runner/vimproc/updatetime' : 40,
  \}
  let g:quickrun_config.swift = {
  \ 'command': 'xcrun',
  \ 'cmdopt': 'swift',
  \ 'exec': '%c %o %s',
  \}
'''


# File Explorer


[[plugins]]
repo = 'pe-ter-/vimfiler.vim'
hook_add = '''
  autocmd FileType vimfiler call unite#custom_default_action('directory', 'lcd')
  nnoremap <silent> <Leader>ev :VimFiler<CR>
  nnoremap <silent> <Leader>es :VimFiler -simple -winwidth=30 -no-quit<CR>
  nnoremap <silent> <Leader>et :VimFilerTab -simple -winwidth=30 -no-quit<CR>
  nnoremap <silent> <Leader>eN :VimFilerCreate -split -simple -winwidth=30 -no-quit<CR>

  let g:vimfiler_as_default_explorer=1
  let g:vimfiler_enable_auto_cd = 1
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_ignore_pattern =
  \ '^\%(\.git\|\.env\|\.tox\|\.toxenv\|\.idea\|\.DS_Store\|\.vagrant\|\.stversions\|\.tmp'
  \ .'\|node_modules\|.*\.pyc\|.*\.egg-info\|__pycache__\)$'
'''

[[plugins]]
repo = 'pe-ter-/fzf.vim'
rev = 'ag-default-options'
if = 'executable("fzf")'
on_cmd = ['FZF','fzf#run']
hook_add = '''
  set rtp+=~/.fzf
  if !isdirectory(expand('~/.cache/fzf'))
    call mkdir(expand('~/.cache/fzf'), 'p')
  endif
  nnoremap [fzf] <Nop>
  nmap <Leader>z [fzf]
  nnoremap <silent> [fzf]w :Windows<CR>
  nnoremap <silent> [fzf]f :Files<CR>
  nnoremap <silent> [fzf]b :Buffers<CR>
  nnoremap <silent> [fzf]l :Lines<CR>
  nnoremap <silent> [fzf]c :BLines<CR>
  nnoremap <silent> [fzf]m :Marks<CR>
  nnoremap <silent> [fzf]/ :History/<CR>
  nnoremap <silent> [fzf]h :History:<CR>
  nnoremap <silent> [fzf]t :Filetypes<CR>
  nnoremap <silent> [fzf]T :Tags<CR>
  nnoremap [fzf]a :Ag<Space>
  nnoremap [fzf]A :Ag!<Space>
  nnoremap <silent> [fzf]g :Ag<Space><C-R><C-W><CR>
  let g:fzf_history_dir = '~/.cache/fzf'
  augroup FzfTagsGroup
    autocmd!
    au BufNewFile,BufRead *.py let g:fzf_tags_command = "ctags -R --languages=python --python-kinds=-iv --exclude=.tox --exclude=.toxenv -f `pwd`/tags `pwd`"
    au VimEnter * command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)
  augroup END
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
  nmap <silent> <C-u><C-t> :<C-u>Denite filetype -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-p> :<C-u>Denite file_rec -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-j> :<C-u>Denite line -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-a> :<C-u>Denite grep -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-g> :<C-u>DeniteCursorWord grep -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-u> :<C-u>Denite file_mru -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-y> :<C-u>Denite neoyank -highlight-mode-insert=String<CR>
  nmap <silent> <C-u><C-r> :<C-u>Denite -resume -highlight-mode-insert=String<CR>
  nmap <silent> <C-u>= :<C-u>Denite -resume -immediately -select=+1<CR>
  nmap <silent> <C-u>- :<C-u>Denite -resume -immediately -select=-1<CR>
'''
hook_post_source = '''
  call denite#custom#var('file_rec', 'command',
  \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  call denite#custom#var('grep', 'command',
  \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
  call denite#custom#var('grep', 'default_opts', [])
  call denite#custom#var('grep', 'recursive_opts', [])
'''


# Edit Utils

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 1
  nmap <Space>/ <Plug>NERDCommenterToggle
  vmap <Space>/ <Plug>NERDCommenterToggle
  vmap <Space>s <Plug>NERDCommenterSexy
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-n>"
  let g:UltiSnipsJumpBackwardTrigger="<c-p>"
  let g:UltiSnipsEditSplit="vertical"
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'


# Window Utils


[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'wesQ3/vim-windowswap'
hook_add = '''
  let g:windowswap_map_keys = 0 
  nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>
'''


# git Utils


[[plugins]]
repo = 'tpope/vim-fugitive.git'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap     <Leader>g   [fugitive]
  nnoremap <silent> [fugitive]b :Gblame<CR>
  nnoremap <silent> [fugitive]s :Gstatus<CR>
  nnoremap <silent> [fugitive]w :Gwrite<CR>
  nnoremap <silent> [fugitive]c :Gcommit<CR>
  nnoremap <silent> [fugitive]d :Gdiff<CR>
  nnoremap <silent> [fugitive]r :Git diff --staged<CR>
  nnoremap <silent> [fugitive]R :Git diff <CR>
'''


[[plugins]]
repo = 'airblade/vim-gitgutter'


[[plugins]]
repo = 'gregsexton/gitv.git'
hook_add = '''
  nnoremap <silent> <Leader>gv :Gitv --all<CR>
  nnoremap <silent> <Leader>gV :Gitv!<CR>
'''


# Ctags


[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
  augroup CtagsGroup
    autocmd!
    au BufNewFile,BufRead *.py,*.rb let g:auto_ctags = 0
    au BufNewFile,BufRead *.py let g:auto_ctags_tags_args = "--languages=python -f `pwd`/tags `pwd`"
    au BufNewFile,BufRead *.rb let g:auto_ctags_tags_args = "--languages=ruby -f ~/rb.tags `pwd`"
  augroup END
'''


# Linter


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_statusline_format = ['E%d', 'W%d', '']
  let g:ale_echo_msg_format = '%linter%: %s'
  nmap <silent> [a <Plug>(ale_previous_wrap)
  nmap <silent> ]a <Plug>(ale_next_wrap)
'''


# Syntax highlight


# html enclosing tags
[[plugins]]
repo = 'valloric/MatchTagAlways'
on_ft = 'html'

# js(x)
[[plugins]]
repo = 'pangloss/vim-javascript'
hook_add = '''
  let g:javascript_plugin_flow = 1
'''

[[plugins]]
repo = 'mxw/vim-jsx'
hook_add = '''
  augroup ES6ScriptGroup
    autocmd!
    au BufRead,BufNewFile *.es6 set filetype=javascript.jsx
  augroup END
'''

# less
[[plugins]]
repo = 'groenewege/vim-less'

# nginx
[[plugins]]
repo = "evanmiller/nginx-vim-syntax"

# toml
[[plugins]]
repo = 'cespare/vim-toml'

# swift
[[plugins]]
repo = 'keith/swift.vim'

[[plugins]]
repo = 'kballard/vim-swift'

# jinja2
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'


# Editor Utils


[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

# python class outline
[[plugins]]
repo = "majutsushi/tagbar"
hook_add = '''
  nmap <Leader>c :TagbarToggle<CR>
'''

# indent line
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_enabled = 1
  let g:indentLine_color_term = 239
'''

