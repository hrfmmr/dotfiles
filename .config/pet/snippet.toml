[[snippets]]
  description = "üåê Get public ip"
  command = "curl https://ipinfo.io/ip"
  output = ""

[[snippets]]
  description = "Generate new ssk key by specifying output path and give comment"
  command = "ssh-keygen -t rsa -f ./github_rsa -C github.com"
  output = ""

[[snippets]]
  description = "Convert id_rsa to .pem"
  command = "openssl rsa -in id_rsa -out id_rsa.pem -outform pem"
  output = ""

[[snippets]]
  description = "Remove all merged branch"
  command = "git checkout master && git branch --merged | grep -v '*' | xargs -I % git branch -d %"
  output = ""

[[snippets]]
  description = "Fetch archived repo from github"
  command = "curl -L https://api.github.com/repos/{{ user }}/{{ repo }}/tarball/{{ branch }} > {{ repo }}.tar.gz"
  output = ""

[[snippets]]
  description = "Copy machine's ip address to clipboard"
  command = "ifconfig | grep -oE \"\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b\" | grep -o \"^192.*\" | head -n1 | tr -d '\\n' | pbcopy"
  output = ""

#
# Google Cloud
#

[[snippets]]
  description = "[GCP] Listing Google Cloud Storage(GCS) buckets"
  command = "gsutil ls -p $PROJECT_ID"
  output = ""

[[snippets]]
  description = "[GCP] Listing Google Cloud Storage(GCS) bucket objects recursively"
  command = "gsutil ls -p $PROJECT_ID -R 'gs://$BUCKET/**'"
  output = ""

[[snippets]]
  description = "[GCP] Remove all of the Google Cloud Storage(GCS) bucket objects"
  command = "gsutil rm 'gs://$BUCKET/*'"
  output = ""

[[snippets]]
  description = "[GCP] List Data Transfer Service configuraitons"
  command = "bq ls --format=prettyjson --transfer_config --transfer_location=us"
  output = ""

[[snippets]]
  description = "[GCP] Get log of Data Transfer Service's job"
  command = '''
  bq ls --format=prettyjson --transfer_config --transfer_location=us |
  jq -r 'map(.displayName + "::" + .name)[]' |
  fzf |
  sed -e "s/.*::\(.*\)$/\1/" |
  xargs -I {} bq ls --format=prettyjson --transfer_run --max_results=20 {} |
  jq -r 'map(.startTime + " " + .name)[]' |
  fzf --sync |
  sed -e "s/.* \(.*\)$/\1/" |
  xargs -I {} bq show --format=prettyjson --transfer_run {} |
  pbcopy
'''
  output = ""

#
# AWS
#

[[snippets]]
  description = "[AWS] üë§ Get AWS account ID"
  command = "aws sts get-caller-identity --query 'Account' --output text"
  output = ""

[[snippets]]
  description = "[AWS] üê≥ Log in to ECR"
  command = '''
account_id=$(aws sts get-caller-identity --query 'Account' --output text) && \
aws ecr get-login-password | docker login --username AWS --password-stdin https://$account_id.dkr.ecr.ap-northeast-1.amazonaws.com
'''
  output = ""

[[snippets]]
  description = "[AWS] List üê≥ ECS clusters"
  command = "aws ecs list-clusters"
  output = ""

# https://github.com/fujiwara/tracer
[[snippets]]
  description = "[AWS] Pick a üê≥ ECS cluster by tracer cli"
  command = "cluster=$(tracer | fzf)"
  output = ""

[[snippets]]
  description = "[AWS] Describe üê≥ ECS Task status"
  command = '''
ecs_cluster=$(tracer | fzf) && \
ecs_task=$(tracer "$ecs_cluster" | fzf | awk '{ print $1 }') && \
tracer $ecs_cluster $ecs_task
'''
  output = ""

[[snippets]]
  # Specify Task's status as --desired-status=(RUNNING|PENDING|STOPPED)
  description = "[AWS] List üê≥ ECS Tasks for target cluster"
  command = '''
aws ecs list-clusters |
jq '.clusterArns[]' |
fzf |
tr -d '\"' |
sed -e 's/.*\/\(.*\)$/\1/' |
xargs -I {} \
  aws ecs list-tasks \
    --cluster {} \
    --desired-status STOPPED
'''
  output = ""

[[snippets]]
  description = "[AWS] Describe a üê≥ ECS Tasks"
  command = '''
ecs_cluster=$(tracer | fzf) && \
ecs_task=$(tracer "$ecs_cluster" | fzf | awk '{ print $1 }') && \
aws ecs describe-tasks \
  --cluster $ecs_cluster \
  --tasks $ecs_task \
  --no-paginate \
  --output json | pbcopy
'''
  output = ""

[[snippets]]
  description = "[AWS] üîç Detect EC2 instance for a ECS task"
  command = '''
AWS_PAGER= && \
ecs_cluster=$(tracer | fzf) && \
ecs_task=$(tracer "$ecs_cluster" | fzf | awk '{ print $1 }') && \
ecs_container_instance=$(
    aws ecs describe-tasks \
      --cluster $ecs_cluster \
      --tasks $ecs_task \
      --output json | jq -r '.tasks[0].containerInstanceArn' | sed 's|.*/||' \
) && \
ec2_instance_id=$(
    aws ecs describe-container-instances \
        --cluster $ecs_cluster \
        --container-instances $ecs_container_instance \
        | jq -r '.containerInstances[0].ec2InstanceId'
) && \
aws ec2 describe-instances \
    --instance-ids $ec2_instance_id | pbcopy
'''
  output = ""


[[snippets]]
  description = "[AWS] List EC2 public DNS names"
  command = '''
aws ec2 describe-instances | \
jq '.Reservations[].Instances[]' | \
jq -r '[(.Tags[]? | select(.Key == "Name")).Value, .PublicDnsName] | join("|")' | \
column -t -s "|"
'''
  output = ""

[[snippets]]
  description = "[AWS] List ELB DNS names"
  command = '''
aws elbv2 describe-load-balancers | \
jq '.LoadBalancers[]' | \
jq -r '[.LoadBalancerName, .Scheme, .DNSName] | join("|")' | \
column -t -s "|"
'''
  output = ""

[[snippets]]
  description = "[AWS] üê≥ ECS Exec"
  command = '''
ecs_cluster=$(tracer | fzf) && \
ecs_task=$(tracer "$ecs_cluster" | fzf | awk '{ print $1 }') && \
aws ecs execute-command --cluster $ecs_cluster --task $ecs_task --container <CONTAINER_NAME> --interactive --command <COMMAND>
'''
  output = ""

# Depends on [TylerBrock/saw: Fast, multi-purpose tool for AWS CloudWatch Logs](https://github.com/TylerBrock/saw)
[[snippets]]
  description = "[AWS] Dump CloudWatch Logs for the target log group[saw]"
  command = '''
cw_log_group=$(saw groups | fzf) && \
saw get $cw_log_group --start -2h | \
bat
'''
  output = ""

[[snippets]]
  description = "[AWS] tail and follow CloudWatch Logs target log group[saw]"
  command = '''
cw_log_group=$(saw groups | fzf) && \
saw watch $cw_log_group
'''
  output = ""

# [lucagrulla/cw: The best way to tail AWS CloudWatch Logs from your terminal](https://github.com/lucagrulla/cw)
[[snippets]]
  description = "[AWS] tail and follow CloudWatch Logs target log group[cw]"
  command = '''
cw_log_group=$(cw ls groups | fzf) && \
cw tail -f $cw_log_group -b2h
'''
  output = ""

[[snippets]]
  description = "[AWS] tail and follow CloudWatch Logs target log group/stream[cw]"
  command = '''
cw_log_group=$(cw ls groups | fzf) && \
cw_log_stream=$(cw ls streams $cw_log_group | fzf) && \
cw tail -f "$cw_log_group:$cw_log_stream" -b2h
'''
  output = ""

[[snippets]]
  description = "[AWS] tail and follow CloudWatch Logs target log stream(from 10 latest streams)"
  command = '''
cw_log_group=$(cw ls groups | fzf) && \
cw_log_stream=$(aws logs describe-log-streams \
    --log-group-name $cw_log_group \
    --max-items 10 \
    --order-by LastEventTime \
    --descending \
    --query 'logStreams[].logStreamName' \
    --output json | jq -r ".[]" | fzf \
) && \
cw tail -f "$cw_log_group:$cw_log_stream" -b1h
'''
  output = ""

[[snippets]]
  description = "[AWS] dump CloudWatch Logs target log stream(from 10 latest streams)"
  command = '''
cw_log_group=$(cw ls groups | fzf) && \
cw_log_stream=$(aws logs describe-log-streams \
    --log-group-name $cw_log_group \
    --max-items 10 \
    --order-by LastEventTime \
    --descending \
    --query 'logStreams[].logStreamName' \
    --output json | jq -r ".[]" | fzf \
) && \
aws logs get-log-events --log-group-name $cw_log_group --log-stream-name $cw_log_stream --output json | jq ".events[].message" | pbcopy
'''
  output = ""
